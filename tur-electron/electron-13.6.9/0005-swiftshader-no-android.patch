diff -uNr a/third_party/swiftshader/src/Vulkan/VkGetProcAddress.cpp b/third_party/swiftshader/src/Vulkan/VkGetProcAddress.cpp
--- a/third_party/swiftshader/src/Vulkan/VkGetProcAddress.cpp	2022-11-09 09:30:26.242905400 +0800
+++ b/third_party/swiftshader/src/Vulkan/VkGetProcAddress.cpp	2022-11-11 20:35:03.121029060 +0800
@@ -19,7 +19,7 @@
 #include <unordered_map>
 #include <vector>
 
-#ifdef __ANDROID__
+#if (defined(__ANDROID__) && !defined(__TERMUX__))
 #	include <hardware/hwvulkan.h>
 #	include <vulkan/vk_android_native_buffer.h>
 #	include <cerrno>
@@ -105,7 +105,7 @@
 	MAKE_VULKAN_INSTANCE_ENTRY(vkSetDebugUtilsObjectNameEXT),
 	MAKE_VULKAN_INSTANCE_ENTRY(vkSetDebugUtilsObjectTagEXT),
 	MAKE_VULKAN_INSTANCE_ENTRY(vkSubmitDebugUtilsMessageEXT),
-#ifndef __ANDROID__
+#if !(defined(__ANDROID__) && !defined(__TERMUX__))
 	// VK_KHR_surface
 	MAKE_VULKAN_INSTANCE_ENTRY(vkDestroySurfaceKHR),
 	MAKE_VULKAN_INSTANCE_ENTRY(vkGetPhysicalDeviceSurfaceSupportKHR),
@@ -310,7 +310,7 @@
 	MAKE_VULKAN_DEVICE_ENTRY(vkQueueInsertDebugUtilsLabelEXT),
 	MAKE_VULKAN_DEVICE_ENTRY(vkSetDebugUtilsObjectNameEXT),
 	MAKE_VULKAN_DEVICE_ENTRY(vkSetDebugUtilsObjectTagEXT),
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 	MAKE_VULKAN_DEVICE_ENTRY(vkGetSwapchainGrallocUsageANDROID),
 	MAKE_VULKAN_DEVICE_ENTRY(vkGetSwapchainGrallocUsage2ANDROID),
 	MAKE_VULKAN_DEVICE_ENTRY(vkAcquireImageANDROID),
@@ -535,7 +535,7 @@
 	        MAKE_VULKAN_DEVICE_ENTRY(vkCmdWriteTimestamp2KHR),
 	        MAKE_VULKAN_DEVICE_ENTRY(vkQueueSubmit2KHR),
 	    } },
-#ifndef __ANDROID__
+#if !(defined(__ANDROID__) && !defined(__TERMUX__))
 	// VK_KHR_swapchain
 	{
 	    VK_KHR_SWAPCHAIN_EXTENSION_NAME,
@@ -680,7 +680,7 @@
 
 }  // namespace vk
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 
 extern "C" hwvulkan_module_t HAL_MODULE_INFO_SYM;
 
diff -uNr a/third_party/swiftshader/src/Vulkan/VkImage.cpp b/third_party/swiftshader/src/Vulkan/VkImage.cpp
--- a/third_party/swiftshader/src/Vulkan/VkImage.cpp	2022-11-09 09:30:26.242905400 +0800
+++ b/third_party/swiftshader/src/Vulkan/VkImage.cpp	2022-11-11 20:35:15.231028902 +0800
@@ -25,7 +25,7 @@
 #include "Device/Blitter.hpp"
 #include "Device/ETC_Decoder.hpp"
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 #	include "System/GrallocAndroid.hpp"
 #	include "VkDeviceMemoryExternalAndroid.hpp"
 #endif
@@ -134,7 +134,7 @@
 	{
 		switch(nextInfo->sType)
 		{
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 			case VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID:
 			{
 				const VkExternalFormatANDROID *externalFormatAndroid = reinterpret_cast<const VkExternalFormatANDROID *>(nextInfo);
@@ -311,7 +311,7 @@
 	}
 }
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 VkResult Image::prepareForExternalUseANDROID() const
 {
 	void *nativeBuffer = nullptr;
diff -uNr a/third_party/swiftshader/src/Vulkan/VkImage.hpp b/third_party/swiftshader/src/Vulkan/VkImage.hpp
--- a/third_party/swiftshader/src/Vulkan/VkImage.hpp	2022-11-09 09:30:26.242905400 +0800
+++ b/third_party/swiftshader/src/Vulkan/VkImage.hpp	2022-11-11 20:35:31.971028682 +0800
@@ -20,7 +20,7 @@
 
 #include "marl/mutex.h"
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 #	include <vulkan/vk_android_native_buffer.h>  // For VkSwapchainImageUsageFlagsANDROID and buffer_handle_t
 #endif
 
@@ -33,7 +33,7 @@
 class DeviceMemory;
 class ImageView;
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 struct BackingMemory
 {
 	int stride = 0;
@@ -49,7 +49,7 @@
 	Image(const VkImageCreateInfo *pCreateInfo, void *mem, Device *device);
 	void destroy(const VkAllocationCallbacks *pAllocator);
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 	VkResult prepareForExternalUseANDROID() const;
 #endif
 
@@ -107,7 +107,7 @@
 	void contentsChanged(const VkImageSubresourceRange &subresourceRange, ContentsChangedContext contentsChangedContext = DIRECT_MEMORY_ACCESS);
 	const Image *getSampledImage(const vk::Format &imageViewFormat) const;
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 	void setBackingMemory(BackingMemory &bm)
 	{
 		backingMemory = bm;
@@ -153,7 +153,7 @@
 	VkImageTiling tiling = VK_IMAGE_TILING_OPTIMAL;
 	VkImageUsageFlags usage = (VkImageUsageFlags)0;
 	Image *decompressedImage = nullptr;
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 	BackingMemory backingMemory = {};
 #endif
 
diff -uNr a/third_party/swiftshader/src/Vulkan/VkPhysicalDevice.cpp b/third_party/swiftshader/src/Vulkan/VkPhysicalDevice.cpp
--- a/third_party/swiftshader/src/Vulkan/VkPhysicalDevice.cpp	2022-11-09 09:30:26.242905400 +0800
+++ b/third_party/swiftshader/src/Vulkan/VkPhysicalDevice.cpp	2022-11-11 20:35:42.081028550 +0800
@@ -22,7 +22,7 @@
 #include <cstring>
 #include <limits>
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 #	include <android/hardware_buffer.h>
 #endif
 
@@ -971,7 +971,7 @@
 	properties->combinedImageSamplerDescriptorCount = 1;  // Need only one descriptor for YCbCr sampling.
 }
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 void PhysicalDevice::getProperties(VkPhysicalDevicePresentationPropertiesANDROID *properties) const
 {
 	properties->sharedImage = VK_FALSE;
diff -uNr a/third_party/swiftshader/src/Vulkan/VkPhysicalDevice.hpp b/third_party/swiftshader/src/Vulkan/VkPhysicalDevice.hpp
--- a/third_party/swiftshader/src/Vulkan/VkPhysicalDevice.hpp	2022-11-09 09:30:26.242905400 +0800
+++ b/third_party/swiftshader/src/Vulkan/VkPhysicalDevice.hpp	2022-11-11 20:35:45.861028500 +0800
@@ -69,7 +69,7 @@
 	void getProperties(const VkExternalMemoryHandleTypeFlagBits *handleType, VkExternalImageFormatProperties *properties) const;
 	void getProperties(const VkExternalMemoryHandleTypeFlagBits *handleType, VkExternalBufferProperties *properties) const;
 	void getProperties(VkSamplerYcbcrConversionImageFormatProperties *properties) const;
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 	void getProperties(VkPhysicalDevicePresentationPropertiesANDROID *properties) const;
 	void getProperties(const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo, VkAndroidHardwareBufferUsageANDROID *properties) const;
 #endif
diff -uNr a/third_party/swiftshader/src/Vulkan/VkQueue.cpp b/third_party/swiftshader/src/Vulkan/VkQueue.cpp
--- a/third_party/swiftshader/src/Vulkan/VkQueue.cpp	2022-11-09 09:30:26.242905400 +0800
+++ b/third_party/swiftshader/src/Vulkan/VkQueue.cpp	2022-11-11 20:35:52.181028418 +0800
@@ -189,7 +189,7 @@
 	}
 }
 
-#ifndef __ANDROID__
+#if !(defined(__ANDROID__) && !defined(__TERMUX__))
 VkResult Queue::present(const VkPresentInfoKHR *presentInfo)
 {
 	// This is a hack to deal with screen tearing for now.
diff -uNr a/third_party/swiftshader/src/Vulkan/VkQueue.hpp b/third_party/swiftshader/src/Vulkan/VkQueue.hpp
--- a/third_party/swiftshader/src/Vulkan/VkQueue.hpp	2022-11-09 09:30:26.242905400 +0800
+++ b/third_party/swiftshader/src/Vulkan/VkQueue.hpp	2022-11-11 21:03:39.721006571 +0800
@@ -53,7 +53,7 @@
 
 	VkResult submit(uint32_t submitCount, SubmitInfo *pSubmits, Fence *fence);
 	VkResult waitIdle();
-#ifndef __ANDROID__
+#if !(defined(__ANDROID__) && !defined(__TERMUX__))
 	VkResult present(const VkPresentInfoKHR *presentInfo);
 #endif
 
--- a/third_party/swiftshader/src/System/Debug.cpp
+++ b/third_party/swiftshader/src/System/Debug.cpp
@@ -14,7 +14,7 @@
 
 #include "Debug.hpp"
 
-#if __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 #	include <android/log.h>
 #endif
 
@@ -55,7 +55,7 @@
 	Disabled,
 };
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 void logv_android(Level level, const char *msg)
 {
 	switch(level)
@@ -107,7 +107,7 @@
 		char buffer[2048];
 		vsnprintf(buffer, sizeof(buffer), format, args);
 
-#	if defined(__ANDROID__)
+#	if defined(__ANDROID__) && !defined(__TERMUX__)
 		logv_android(level, buffer);
 #	elif defined(_WIN32)
 		logv_std(level, buffer);
--- a/third_party/swiftshader/src/Reactor/Debug.cpp
+++ b/third_party/swiftshader/src/Reactor/Debug.cpp
@@ -19,7 +19,7 @@
 #include <cstdio>
 #include <string>
 
-#if __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 #	include <android/log.h>
 #endif
 
@@ -105,7 +105,7 @@
 	Fatal,
 };
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 void logv_android(Level level, const char *msg)
 {
 	switch(level)
@@ -156,7 +156,7 @@
 	char buffer[2048];
 	vsnprintf(buffer, sizeof(buffer), format, args);
 
-#	if defined(__ANDROID__)
+#	if defined(__ANDROID__) && !defined(__TERMUX__)
 	logv_android(level, buffer);
 #	elif defined(_WIN32)
 	logv_std(level, buffer);
diff -uNr a/third_party/swiftshader/src/OpenGL/common/Image.hpp b/third_party/swiftshader/src/OpenGL/common/Image.hpp
--- a/third_party/swiftshader/src/OpenGL/common/Image.hpp	2023-01-02 18:33:56.210634400 +0800
+++ b/third_party/swiftshader/src/OpenGL/common/Image.hpp	2023-01-02 18:33:56.209408600 +0800
@@ -21,13 +21,13 @@
 #include <GLES3/gl3.h>
 #include <GLES2/gl2ext.h>
 
-#if defined(__ANDROID__) && !defined(ANDROID_NDK_BUILD)
+#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_NDK_BUILD)
 #include <system/graphics.h>
 #include <vndk/window.h>
 #include "../../Common/GrallocAndroid.hpp"
 #endif
 
-#if defined(__ANDROID__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
+#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
 #include "../../Common/DebugAndroid.hpp"
 #define LOGLOCK(fmt, ...) // TRACE(fmt " tid=%d", ##__VA_ARGS__, gettid())
 #else
@@ -237,7 +237,7 @@
 	void loadStencilData(GLsizei width, GLsizei height, GLsizei depth, int inputPitch, int inputHeight, GLenum format, GLenum type, const void *input, void *buffer);
 };
 
-#if defined(__ANDROID__) && !defined(ANDROID_NDK_BUILD)
+#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_NDK_BUILD)
 
 inline GLenum GLPixelFormatFromAndroid(int halFormat)
 {
diff -uNr a/third_party/swiftshader/src/OpenGL/common/debug.cpp b/third_party/swiftshader/src/OpenGL/common/debug.cpp
--- a/third_party/swiftshader/src/OpenGL/common/debug.cpp	2023-01-02 18:33:56.221318000 +0800
+++ b/third_party/swiftshader/src/OpenGL/common/debug.cpp	2023-01-02 18:35:40.427570400 +0800
@@ -16,7 +16,7 @@
 
 #include "common/debug.h"
 
-#ifdef  __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 #if !defined(ANDROID_NDK_BUILD)
 #include <utils/String8.h>
 #if ANDROID_PLATFORM_SDK_VERSION < 27
@@ -34,7 +34,7 @@
 
 namespace es
 {
-#if defined(__ANDROID__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
+#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
 	static void output(const char *format, va_list vararg)
 	{
 		ALOGI("%s", android::String8::formatV(format, vararg).string());
diff -uNr a/third_party/swiftshader/src/OpenGL/common/debug.h b/third_party/swiftshader/src/OpenGL/common/debug.h
--- a/third_party/swiftshader/src/OpenGL/common/debug.h	2023-01-02 18:33:56.535289100 +0800
+++ b/third_party/swiftshader/src/OpenGL/common/debug.h	2023-01-02 18:33:56.534289100 +0800
@@ -17,7 +17,9 @@
 #ifndef COMMON_DEBUG_H_
 #define COMMON_DEBUG_H_
 
-#if defined(__ANDROID__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
+#include <sys/cdefs.h>
+
+#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
 #include "../../Common/DebugAndroid.hpp"
 #else
 #include <stdio.h>
diff -uNr a/third_party/swiftshader/src/OpenGL/compiler/ConstantUnion.h b/third_party/swiftshader/src/OpenGL/compiler/ConstantUnion.h
--- a/third_party/swiftshader/src/OpenGL/compiler/ConstantUnion.h	2023-01-02 18:33:56.539291200 +0800
+++ b/third_party/swiftshader/src/OpenGL/compiler/ConstantUnion.h	2023-01-02 18:36:13.305150100 +0800
@@ -15,7 +15,9 @@
 #ifndef _CONSTANT_UNION_INCLUDED_
 #define _CONSTANT_UNION_INCLUDED_
 
-#if defined(__ANDROID__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
+#include <sys/cdefs.h>
+
+#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
 #include "../../Common/DebugAndroid.hpp"
 #else
 #include <assert.h>
diff -uNr a/third_party/swiftshader/src/OpenGL/compiler/SymbolTable.h b/third_party/swiftshader/src/OpenGL/compiler/SymbolTable.h
--- a/third_party/swiftshader/src/OpenGL/compiler/SymbolTable.h	2023-01-02 18:33:56.551939000 +0800
+++ b/third_party/swiftshader/src/OpenGL/compiler/SymbolTable.h	2023-01-02 18:36:43.347376700 +0800
@@ -38,7 +38,9 @@
 //   are tracked in the intermediate representation, not the symbol table.
 //
 
-#if defined(__ANDROID__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
+#include <sys/cdefs.h>
+
+#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
 #include "../../Common/DebugAndroid.hpp"
 #else
 #include <assert.h>
diff -uNr a/third_party/swiftshader/src/OpenGL/compiler/debug.h b/third_party/swiftshader/src/OpenGL/compiler/debug.h
--- a/third_party/swiftshader/src/OpenGL/compiler/debug.h	2023-01-02 18:33:56.556969500 +0800
+++ b/third_party/swiftshader/src/OpenGL/compiler/debug.h	2023-01-02 18:36:27.590250000 +0800
@@ -17,7 +17,9 @@
 #ifndef COMPILER_DEBUG_H_
 #define COMPILER_DEBUG_H_
 
-#if defined(__ANDROID__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
+#include <sys/cdefs.h>
+
+#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
 #include "../../Common/DebugAndroid.hpp"
 
 #define Trace(...) ((void)0)
diff -uNr a/third_party/swiftshader/src/OpenGL/libEGL/Config.cpp b/third_party/swiftshader/src/OpenGL/libEGL/Config.cpp
--- a/third_party/swiftshader/src/OpenGL/libEGL/Config.cpp	2023-01-02 18:33:56.568612700 +0800
+++ b/third_party/swiftshader/src/OpenGL/libEGL/Config.cpp	2023-01-02 18:37:12.156812300 +0800
@@ -22,7 +22,7 @@
 #include "common/debug.h"
 
 #include <EGL/eglext.h>
-#if defined(__ANDROID__) && !defined(ANDROID_NDK_BUILD)
+#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_NDK_BUILD)
 #include <system/graphics.h>
 #endif
 
@@ -66,7 +66,7 @@
 		mBlueSize = 8;
 		mAlphaSize = 8;
 		mBindToTextureRGBA = EGL_TRUE;
-		#if defined(__ANDROID__) && !defined(ANDROID_NDK_BUILD)
+		#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_NDK_BUILD)
 			mNativeVisualID = HAL_PIXEL_FORMAT_BGRA_8888;
 		#else
 			mNativeVisualID = 2;   // Arbitrary; prefer over ABGR
@@ -78,7 +78,7 @@
 		mBlueSize = 8;
 		mAlphaSize = 8;
 		mBindToTextureRGBA = EGL_TRUE;
-		#if defined(__ANDROID__) && !defined(ANDROID_NDK_BUILD)
+		#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_NDK_BUILD)
 			mNativeVisualID = HAL_PIXEL_FORMAT_RGBA_8888;
 		#endif
 		break;
@@ -87,7 +87,7 @@
 		mGreenSize = 6;
 		mBlueSize = 5;
 		mAlphaSize = 0;
-		#if defined(__ANDROID__) && !defined(ANDROID_NDK_BUILD)
+		#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_NDK_BUILD)
 			mNativeVisualID = HAL_PIXEL_FORMAT_RGB_565;
 		#endif
 		break;
@@ -97,7 +97,7 @@
 		mBlueSize = 8;
 		mAlphaSize = 0;
 		mBindToTextureRGB = EGL_TRUE;
-		#if defined(__ANDROID__) && !defined(ANDROID_NDK_BUILD)
+		#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_NDK_BUILD)
 			mNativeVisualID = 0x1FF;   // HAL_PIXEL_FORMAT_BGRX_8888
 		#else
 			mNativeVisualID = 1;   // Arbitrary; prefer over XBGR
@@ -109,7 +109,7 @@
 		mBlueSize = 8;
 		mAlphaSize = 0;
 		mBindToTextureRGB = EGL_TRUE;
-		#if defined(__ANDROID__) && !defined(ANDROID_NDK_BUILD)
+		#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_NDK_BUILD)
 			mNativeVisualID = HAL_PIXEL_FORMAT_RGBX_8888;
 		#endif
 		break;
diff -uNr a/third_party/swiftshader/src/OpenGL/libEGL/Display.cpp b/third_party/swiftshader/src/OpenGL/libEGL/Display.cpp
--- a/third_party/swiftshader/src/OpenGL/libEGL/Display.cpp	2023-01-02 18:33:56.571613700 +0800
+++ b/third_party/swiftshader/src/OpenGL/libEGL/Display.cpp	2023-01-02 18:37:28.655786100 +0800
@@ -25,7 +25,7 @@
 #include "common/debug.h"
 #include "Common/RecursiveLock.hpp"
 
-#if defined(__ANDROID__) && !defined(ANDROID_NDK_BUILD)
+#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_NDK_BUILD)
 #include <vndk/window.h>
 #include <sys/ioctl.h>
 #include <linux/fb.h>
@@ -668,7 +668,7 @@
 {
 	#if defined(_WIN32)
 		return IsWindow(window) == TRUE;
-	#elif defined(__ANDROID__)
+	#elif defined(__ANDROID__) && !defined(__TERMUX__)
 		if(!window)
 		{
 			ERR("%s called with window==NULL %s:%d", __FUNCTION__, __FILE__, __LINE__);
@@ -779,7 +779,7 @@
 		case 16: return sw::FORMAT_R5G6B5;
 		default: UNREACHABLE(bpp);   // Unexpected display mode color depth
 		}
-	#elif defined(__ANDROID__)
+	#elif defined(__ANDROID__) && !defined(__TERMUX__)
 	#if !defined(ANDROID_NDK_BUILD)
 		static const char *const framebuffer[] =
 		{
diff -uNr a/third_party/swiftshader/src/OpenGL/libEGL/Surface.cpp b/third_party/swiftshader/src/OpenGL/libEGL/Surface.cpp
--- a/third_party/swiftshader/src/OpenGL/libEGL/Surface.cpp	2023-01-02 18:33:56.572609500 +0800
+++ b/third_party/swiftshader/src/OpenGL/libEGL/Surface.cpp	2023-01-02 18:38:49.665508500 +0800
@@ -33,7 +33,7 @@
 #elif defined(__APPLE__)
 #include "OSXUtils.hpp"
 #endif
-#if defined(__ANDROID__) && defined(ANDROID_NDK_BUILD)
+#if defined(__ANDROID__) && !defined(__TERMUX__) && defined(ANDROID_NDK_BUILD)
 #include <android/native_window.h>
 #endif
 
@@ -343,7 +343,7 @@
 
 		int windowWidth = client.right - client.left;
 		int windowHeight = client.bottom - client.top;
-	#elif defined(__ANDROID__)
+	#elif defined(__ANDROID__) && !defined(__TERMUX__)
 		int windowWidth = ANativeWindow_getWidth(window);
 		int windowHeight = ANativeWindow_getHeight(window);
 	#elif defined(USE_X11)
diff -uNr a/third_party/swiftshader/src/OpenGL/libEGL/libEGL.cpp b/third_party/swiftshader/src/OpenGL/libEGL/libEGL.cpp
--- a/third_party/swiftshader/src/OpenGL/libEGL/libEGL.cpp	2023-01-02 18:33:56.574609900 +0800
+++ b/third_party/swiftshader/src/OpenGL/libEGL/libEGL.cpp	2023-01-02 18:38:32.000720100 +0800
@@ -23,7 +23,7 @@
 #include "common/debug.h"
 #include "Common/Version.h"
 
-#if defined(__ANDROID__) && !defined(ANDROID_NDK_BUILD)
+#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_NDK_BUILD)
 #include <vndk/window.h>
 #elif defined(USE_X11)
 #include "Main/libX11.hpp"
@@ -153,7 +153,7 @@
 		// FIXME: Check if display_id is the default display
 	}
 
-	#if defined(__linux__) && !defined(__ANDROID__)
+	#if defined(__linux__) && !(defined(__ANDROID__) && !defined(__TERMUX__))
 		#if defined(USE_X11)
 		if(!libX11)
 		#endif  // Non X11 linux is headless only
@@ -216,7 +216,7 @@
 	{
 		return success(
 			"EGL_KHR_client_get_all_proc_addresses "
-#if defined(__linux__) && !defined(__ANDROID__)
+#if defined(__linux__) && !(defined(__ANDROID__) && !defined(__TERMUX__))
 			"EGL_KHR_platform_gbm "
 #endif
 #if defined(USE_X11)
@@ -1225,7 +1225,7 @@
 		}
 	}
 
-	#if defined(__ANDROID__) && !defined(ANDROID_NDK_BUILD)
+	#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_NDK_BUILD)
 		if(target == EGL_NATIVE_BUFFER_ANDROID)
 		{
 			ANativeWindowBuffer *nativeBuffer = reinterpret_cast<ANativeWindowBuffer*>(buffer);
@@ -1307,7 +1307,7 @@
 {
 	TRACE("(EGLenum platform = 0x%X, void *native_display = %p, const EGLAttrib *attrib_list = %p)", platform, native_display, attrib_list);
 
-	#if defined(__linux__) && !defined(__ANDROID__)
+	#if defined(__linux__) && !(defined(__ANDROID__) && !defined(__TERMUX__))
 		switch(platform)
 		{
 		#if defined(USE_X11)
diff -uNr a/third_party/swiftshader/src/OpenGL/libEGL/libEGL.hpp b/third_party/swiftshader/src/OpenGL/libEGL/libEGL.hpp
--- a/third_party/swiftshader/src/OpenGL/libEGL/libEGL.hpp	2023-01-02 18:33:56.575670300 +0800
+++ b/third_party/swiftshader/src/OpenGL/libEGL/libEGL.hpp	2023-01-02 18:38:40.378636100 +0800
@@ -98,7 +98,7 @@
 				#else
 					const char *libEGL_lib[] = {"libswiftshader_libEGL.dll", "libEGL.dll", "libEGL_translator.dll"};
 				#endif
-			#elif defined(__ANDROID__)
+			#elif (defined(__ANDROID__) && !defined(__TERMUX__))
 				const char *libEGL_lib[] = {"libEGL_swiftshader.so", "libEGL_swiftshader.so"};
 			#elif defined(__linux__)
 				#if defined(__LP64__)
diff -uNr a/third_party/swiftshader/src/OpenGL/libGLES_CM/libGLES_CM.hpp b/third_party/swiftshader/src/OpenGL/libGLES_CM/libGLES_CM.hpp
--- a/third_party/swiftshader/src/OpenGL/libGLES_CM/libGLES_CM.hpp	2023-01-02 18:33:56.586394400 +0800
+++ b/third_party/swiftshader/src/OpenGL/libGLES_CM/libGLES_CM.hpp	2023-01-02 18:38:53.577638400 +0800
@@ -259,7 +259,7 @@
 				#else
 					const char *libGLES_CM_lib[] = {"libGLES_CM.dll", "libGLES_CM_translator.dll"};
 				#endif
-			#elif defined(__ANDROID__)
+			#elif defined(__ANDROID__) && !defined(__TERMUX__)
 				const char *libGLES_CM_lib[] = {"libGLESv1_CM_swiftshader.so", "libGLESv1_CM_swiftshader.so"};
 			#elif defined(__linux__)
 				#if defined(__LP64__)
diff -uNr a/third_party/swiftshader/src/OpenGL/libGLESv2/libGLESv2.hpp b/third_party/swiftshader/src/OpenGL/libGLESv2/libGLESv2.hpp
--- a/third_party/swiftshader/src/OpenGL/libGLESv2/libGLESv2.hpp	2023-01-02 18:33:56.615211100 +0800
+++ b/third_party/swiftshader/src/OpenGL/libGLESv2/libGLESv2.hpp	2023-01-02 18:38:58.427959100 +0800
@@ -284,7 +284,7 @@
 				#else
 					const char *libGLESv2_lib[] = {"libswiftshader_libGLESv2.dll", "libGLESv2.dll", "libGLES_V2_translator.dll"};
 				#endif
-			#elif defined(__ANDROID__)
+			#elif defined(__ANDROID__) && !defined(__TERMUX__)
 				const char *libGLESv2_lib[] = {"libGLESv2_swiftshader.so", "libGLESv2_swiftshader.so"};
 			#elif defined(__linux__)
 				#if defined(__LP64__)
--- a/third_party/swiftshader/src/Common/Debug.hpp	2023-01-02 18:50:34.155481007 +0800
+++ b/third_party/swiftshader/src/Common/Debug.hpp	2023-01-02 18:50:37.485480696 +0800
@@ -15,7 +15,9 @@
 #ifndef Debug_hpp
 #define Debug_hpp
 
-#if defined(__ANDROID__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
+#include <sys/cdefs.h>
+
+#if defined(__ANDROID__) && !defined(__TERMUX__) && !defined(ANDROID_HOST_BUILD) && !defined(ANDROID_NDK_BUILD)
 #include "DebugAndroid.hpp"
 #else
 
--- a/third_party/swiftshader/src/Vulkan/libVulkan.cpp
+++ b/third_party/swiftshader/src/Vulkan/libVulkan.cpp
@@ -76,7 +76,7 @@
 
 #include "WSI/HeadlessSurfaceKHR.hpp"
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 #	include "commit.h"
 #	include "System/GrallocAndroid.hpp"
 #	include <android/log.h>
@@ -107,7 +107,7 @@
 namespace {
 
 // Enable commit_id.py and #include commit.h for other platforms.
-#if defined(__ANDROID__) && defined(ENABLE_BUILD_VERSION_OUTPUT)
+#if defined(__ANDROID__) && !defined(__TERMUX__) && defined(ENABLE_BUILD_VERSION_OUTPUT)
 void logBuildVersionInformation()
 {
 	// TODO(b/144093703): Don't call __android_log_print() directly
@@ -172,7 +172,7 @@
 void initializeLibrary()
 {
 	static bool doOnce = [] {
-#if defined(__ANDROID__) && defined(ENABLE_BUILD_VERSION_OUTPUT)
+#if defined(__ANDROID__) && !defined(__TERMUX__) && defined(ENABLE_BUILD_VERSION_OUTPUT)
 		logBuildVersionInformation();
 #endif  // __ANDROID__ && ENABLE_BUILD_VERSION_OUTPUT
 		setReactorDefaultConfig();
@@ -317,7 +317,7 @@
 	{ { VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME, VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION } },
 	{ { VK_EXT_DEBUG_UTILS_EXTENSION_NAME, VK_EXT_DEBUG_UTILS_SPEC_VERSION } },
 	{ { VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME, VK_EXT_HEADLESS_SURFACE_SPEC_VERSION } },
-#ifndef __ANDROID__
+#if !(defined(__ANDROID__) && !defined(__TERMUX__))
 	{ { VK_KHR_SURFACE_EXTENSION_NAME, VK_KHR_SURFACE_SPEC_VERSION } },
 #endif
 #ifdef VK_USE_PLATFORM_XCB_KHR
@@ -376,7 +376,7 @@
 	// The following extension is used by ANGLE to emulate blitting the stencil buffer
 	{ { VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME, VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION } },
 	{ { VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME, VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION } },
-#ifndef __ANDROID__
+#if !(defined(__ANDROID__) && !defined(__TERMUX__))
 	// We fully support the KHR_swapchain v70 additions, so just track the spec version.
 	{ { VK_KHR_SWAPCHAIN_EXTENSION_NAME, VK_KHR_SWAPCHAIN_SPEC_VERSION } },
 #else
@@ -404,7 +404,7 @@
 	{ { VK_FUCHSIA_EXTERNAL_MEMORY_EXTENSION_NAME, VK_FUCHSIA_EXTERNAL_MEMORY_SPEC_VERSION } },
 #endif
 	{ { VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME, VK_EXT_PROVOKING_VERTEX_SPEC_VERSION } },
-#if !defined(__ANDROID__)
+#if !(defined(__ANDROID__) && !defined(__TERMUX__))
 	{ { VK_GOOGLE_SAMPLER_FILTERING_PRECISION_EXTENSION_NAME, VK_GOOGLE_SAMPLER_FILTERING_PRECISION_SPEC_VERSION } },
 #endif
 	{ { VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME, VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION } },
@@ -1753,7 +1753,7 @@
 
 	const VkBaseInStructure *extensionCreateInfo = reinterpret_cast<const VkBaseInStructure *>(pCreateInfo->pNext);
 
-#ifdef __ANDROID__
+#if (defined(__ANDROID__) && !defined(__TERMUX__))
 	vk::BackingMemory backmem;
 	bool swapchainImage = false;
 #endif
@@ -1762,7 +1762,7 @@
 	{
 		switch((long)(extensionCreateInfo->sType))
 		{
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 			case VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID:
 			{
 				const VkSwapchainImageCreateInfoANDROID *swapImageCreateInfo = reinterpret_cast<const VkSwapchainImageCreateInfoANDROID *>(extensionCreateInfo);
@@ -1810,7 +1810,7 @@
 
 	VkResult result = vk::Image::Create(pAllocator, pCreateInfo, pImage, vk::Cast(device));
 
-#ifdef __ANDROID__
+#if (defined(__ANDROID__) && !defined(__TERMUX__))
 	if(swapchainImage)
 	{
 		if(result != VK_SUCCESS)
@@ -1848,7 +1848,7 @@
 	TRACE("(VkDevice device = %p, VkImage image = %p, const VkAllocationCallbacks* pAllocator = %p)",
 	      device, static_cast<void *>(image), pAllocator);
 
-#ifdef __ANDROID__
+#if (defined(__ANDROID__) && !defined(__TERMUX__))
 	vk::Image *img = vk::Cast(image);
 	if(img && img->hasExternalMemory())
 	{
@@ -2129,7 +2129,7 @@
 				ycbcrConversion = vk::Cast(samplerYcbcrConversionInfo->conversion);
 			}
 			break;
-#if !defined(__ANDROID__)
+#if !(defined(__ANDROID__) && !defined(__TERMUX__))
 			case VK_STRUCTURE_TYPE_SAMPLER_FILTERING_PRECISION_GOOGLE:
 			{
 				const VkSamplerFilteringPrecisionGOOGLE *filteringInfo =
@@ -2896,7 +2896,7 @@
 					/* Do nothing */
 					break;
 
-#ifndef __ANDROID__
+#if !(defined(__ANDROID__) && !defined(__TERMUX__))
 				case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR:
 				{
 					auto swapchainInfo = reinterpret_cast<VkBindImageMemorySwapchainInfoKHR const *>(extInfo);
@@ -3129,7 +3129,7 @@
 				vk::Cast(physicalDevice)->getProperties(properties);
 			}
 			break;
-#ifdef __ANDROID__
+#if (defined(__ANDROID__) && !defined(__TERMUX__))
 			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID:
 			{
 				auto properties = reinterpret_cast<VkPhysicalDevicePresentationPropertiesANDROID *>(extensionProperties);
@@ -3310,7 +3310,7 @@
 
 	VkBaseOutStructure *extensionProperties = reinterpret_cast<VkBaseOutStructure *>(pImageFormatProperties->pNext);
 
-#ifdef __ANDROID__
+#if !(defined(__ANDROID__) && !defined(__TERMUX__))
 	bool hasAHBUsage = false;
 #endif
 
@@ -3336,7 +3336,7 @@
 				ASSERT(!hasDeviceExtension(VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME));
 			}
 			break;
-#ifdef __ANDROID__
+#if (defined(__ANDROID__) && !defined(__TERMUX__))
 			case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID:
 			{
 				auto properties = reinterpret_cast<VkAndroidHardwareBufferUsageANDROID *>(extensionProperties);
@@ -3451,7 +3451,7 @@
 
 	vk::Cast(physicalDevice)->getImageFormatProperties(format, type, tiling, usage, flags, &pImageFormatProperties->imageFormatProperties);
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 	if(hasAHBUsage)
 	{
 		// AHardwareBuffer_lock may only be called with a single layer.
@@ -3938,7 +3938,7 @@
 	return vk::HeadlessSurfaceKHR::Create(pAllocator, pCreateInfo, pSurface);
 }
 
-#ifndef __ANDROID__
+#if !(defined(__ANDROID__) && !defined(__TERMUX__))
 VKAPI_ATTR void VKAPI_CALL vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks *pAllocator)
 {
 	TRACE("(VkInstance instance = %p, VkSurfaceKHR surface = %p, const VkAllocationCallbacks* pAllocator = %p)",
@@ -4110,7 +4110,7 @@
 
 #endif  // ! __ANDROID__
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 
 VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainGrallocUsage2ANDROID(VkDevice device, VkFormat format, VkImageUsageFlags imageUsage, VkSwapchainImageUsageFlagsANDROID swapchainUsage, uint64_t *grallocConsumerUsage, uint64_t *grallocProducerUsage)
 {
